# Function to compute Wilcoxon signed rank, after realizing that using an unpaired t-test that assumed normality was incorrect # Note: Zero-imputation now defunct. Using this for phases 1, 2, and 3 only
signedRank <- function(phase, phase_next, code1, code2) {
to_search <- str_c(code1, " & ", code2) # Concatenate code1 and code2 to get a string to search with
phaseid <- ona_multimodal_tif_set$line.weights$phaseid # Get the phase matrix from lineweights
units_rows <- ona_multimodal_tif_set$line.weights$ENA_UNIT # Get units from lineweights
units_rows <- as.data.frame(units_rows) %>%
mutate(units = str_sub(units_rows, start = 1, end = -2))
units_rows <- pull(units_rows, units)
line_weights_rows = ona_multimodal_tif_set$line.weights[[to_search]] # Filter lineweights according to code pairs
# Build temporary dataframe containing all phases, units, and their respective lineweights
temp_df <- as.data.frame(phaseid) %>%
mutate(units = units_rows) %>%
mutate(line_weights = line_weights_rows)
# Dataframe for the first phase
phase_df <- temp_df %>%
filter(phaseid == phase)
# # Get units from phase 3
# phase_3_units_df <- temp_df %>%
#   filter(phaseid == 3)
# phase_3_units <- pull(phase_3_units_df, units)
# Impute empty 6 lineweights for phase 4 (48 -> 54)
# if (phase_df$phaseid[[1]] == 4) {
#   six_zeros = c(0, 0, 0, 0, 0, 0)
#   # Get missing units by set difference of phase 3 and phase 4
#   phase_4_units = pull(phase_df, units)
#   missing_units = phase_3_units[!(phase_3_units %in% phase_4_units)]
#   fill_phase_id = c(4, 4, 4, 4, 4, 4)
#   df_to_add = as.data.frame(six_zeros) %>%
#     rename(line_weights = six_zeros) %>%
#     mutate(units = missing_units) %>%
#     mutate(phaseid = fill_phase_id)
#   phase_df <- rbind(phase_df, df_to_add)
# }
#
# # Impute 24 empty lineweights for phase 5 (30 -> 54)
# if (phase_df$phaseid[[1]] == 5) {
#   twentyfour_zeros = rep(0,times = 24)
#   # Get missing units by set difference of phase 4 and phase 5
#   phase_5_units = pull(phase_df, units)
#   missing_units = phase_3_units[!(phase_3_units %in% phase_5_units)]
#   fill_phase_id = rep(5,times = 24)
#   df_to_add = as.data.frame(twentyfour_zeros) %>%
#     rename(line_weights = twentyfour_zeros) %>%
#     mutate(units = missing_units) %>%
#     mutate(phaseid = fill_phase_id)
#   phase_df <- rbind(phase_df, df_to_add)
# }
# Dataframe for the second phase
phase_next_df <- temp_df %>%
filter(phaseid == phase_next)
# # Impute empty 6 lineweights for phase 4 (48 -> 54)
# if (phase_next_df$phaseid[[1]] == 4) {
#   six_zeros = c(0, 0, 0, 0, 0, 0)
#   # Get missing units by set difference of phase 3 and phase 4
#   phase_4_units = pull(phase_next_df, units)
#   missing_units = phase_3_units[!(phase_3_units %in% phase_4_units)]
#   # missing_units = rep("unit", times = 6)
#   fill_phase_id = c(4, 4, 4, 4, 4, 4)
#   df_to_add = as.data.frame(six_zeros) %>%
#     rename(line_weights = six_zeros) %>%
#     mutate(units = missing_units) %>%
#     mutate(phaseid = fill_phase_id)
#   phase_next_df <- rbind(phase_next_df, df_to_add)
# }
#
# # Impute 24 empty lineweights for phase 5 (30 -> 54)
# if (phase_next_df$phaseid[[1]] == 5) {
#   twentyfour_zeros = rep(0,times = 24)
#   # Get missing units by set difference of phase 4 and phase 5
#   phase_5_units = pull(phase_next_df, units)
#   missing_units = phase_3_units[!(phase_3_units %in% phase_5_units)]
#   fill_phase_id = rep(5, times = 24)
#   df_to_add = as.data.frame(twentyfour_zeros) %>%
#     mutate(phaseid = fill_phase_id) %>%
#     mutate(units = missing_units) %>%
#     rename(line_weights = twentyfour_zeros)
#   phase_next_df <- rbind(phase_next_df, df_to_add)
# }
# Bind together these two dataframes
silly_df <- rbind(phase_df, phase_next_df)
# Perform Wilcoxon signed-rank test
wilcox_test = wilcox.test(line_weights ~ phaseid, data = silly_df, paired = TRUE)
# Pull out lineweights from pre-binded dataframes for Cohen's d calculation
key_lw1 <- pull(phase_df, line_weights)
key_lw2 <- pull(phase_next_df, line_weights)
# Calculate the effect size using Cohen's d
eff_size <- rank_biserial(key_lw1, key_lw2, var.equal = FALSE)
# Make comprehensive dataframe detailing the results
toReturn <- tribble(
~"initial_phase", ~"next_phase", ~"codes", ~"p-value", ~"effect_size", ~"U-statistic",
phase, phase_next, to_search, wilcox_test$p.value, eff_size$estimate, wilcox_test$statistic
)
# Return dataframe
print(toReturn)
}
# Connections that were of interest before
# signedRank(1, 2, "task_execution", "metacognitive")
# signedRank(1, 2, "other", "metacognitive")
# signedRank(2, 3, "peer", "cognitive")
# signedRank(3, 4, "task_execution", "cognitive")
# signedRank(4, 5, "task_execution", "metacognitive")
# signedRank(4, 5, "peer", "socio-emo")
# # Connections tested previously
# #
# #
# #
# # Connections to test for phases 1, 2, and 3
# # Phase 1 and 2, low_metacognitive to cognitive
# signedRank(1, 2, "metacognitive", "cognitive")
# #
# # # Phase 1 and 2, task_execution to low_metacognitive
# signedRank(1, 2, "task_execution", "metacognitive")
# #
# # # Phase 1 and 2, other to low_metacognitive
# signedRank(1, 2, "other", "metacognitive")
# #
# # # Phase 1 and 2, low_metacognitive to laptop
# signedRank(1, 2, "metacognitive", "laptop")
# # # Phase 1 and 2, peer to cognitive
# signedRank(1, 2, "peer", "cognitive")
# # Phase 1 and 2, socio-emo to cognitive
# signedRank(1, 2, "socio-emo", "cognitive")
# # Phase 1 and 2, peer to socio-emo
# signedRank(1, 2, "peer", "socio-emo")
# # # Phase 1 and 2, laptop to socio-emo
# signedRank(1, 2, "laptop", "socio-emo")
# # Phase 2 and 3, peer to low_metacognitive
# signedRank(2, 3, "peer", "metacognitive")
# #
# # # Phase 2 and 3, low_metacognitive to cognitive
# signedRank(2, 3, "metacognitive", "cognitive")
# #
# # # Phase 2 and 3, task_execution to low_metacognitive
# signedRank(2, 3, "task_execution", "metacognitive")
# # # Phase 2 and 3, peer to cognitive
# signedRank(2, 3, "peer", "cognitive")
# # # Phase 2 and 3, socio-emo to cognitive
# signedRank(2, 3, "socio-emo", "cognitive")
# # # Phase 2 and 3, peer to socio-emo
# signedRank(2, 3, "peer", "socio-emo")
# # # Phase 2 and 3, laptop to socio-emo
# signedRank(2, 3, "laptop", "socio-emo")
# # # Phase 2 and 3, task_execution to peer
# signedRank(2, 3, "task_execution", "peer")
# #
# # # Phase 2 and 3, laptop to cognitive
# signedRank(2, 3, "laptop", "cognitive")
# Signed rank function for phases 1, 2, 3, and 4 using 24 students rather than 27. The first one will be used for 27 students in phases 1, 2, 3, and the next for 15 students in phases 1, 2, 3, 4, and 5
signedRank2 <- function(phase, phase_next, code1, code2) {
to_search <- str_c(code1, " & ", code2) # Concatenate code1 and code2 to get a string to search with
phaseid <- ona_multimodal_tif_set$line.weights$phaseid # Get the phase matrix from lineweights
units_rows <- ona_multimodal_tif_set$line.weights$ENA_UNIT # Get units from lineweights
units_rows <- as.data.frame(units_rows) %>%
mutate(units = str_sub(units_rows, start = 1, end = -2))
units_rows <- pull(units_rows, units)
line_weights_rows = ona_multimodal_tif_set$line.weights[[to_search]] # Filter lineweights according to code pairs
# Build temporary dataframe containing all phases, units, and their respective lineweights
temp_df <- as.data.frame(phaseid) %>%
mutate(units = units_rows) %>%
mutate(line_weights = line_weights_rows)
# Get units from phase 4
phase_4_units_df <- temp_df %>%
filter(phaseid == 4)
phase_4_units <- pull(phase_4_units_df, units)
# Dataframe for the first phase
phase_df <- temp_df %>%
filter(phaseid == phase) %>%
filter(units %in% phase_4_units)
# Dataframe for the second phase
phase_next_df <- temp_df %>%
filter(phaseid == phase_next) %>%
filter(units %in% phase_4_units)
# Bind together these two dataframes
silly_df <- rbind(phase_df, phase_next_df)
# Perform Wilcoxon signed-rank test
wilcox_test = wilcox.test(line_weights ~ phaseid, data = silly_df, paired = TRUE)
# Pull out lineweights from pre-binded dataframes for Cohen's d calculation
key_lw1 <- pull(phase_df, line_weights)
key_lw2 <- pull(phase_next_df, line_weights)
# Calculate the effect size using Cohen's d
eff_size <- cohen.d(key_lw1, key_lw2, var.equal = FALSE)
# Make comprehensive dataframe detailing the results
toReturn <- tribble(
~"initial_phase", ~"next_phase", ~"codes", ~"p-value", ~"effect_size", ~"U-statistic",
phase, phase_next, to_search, wilcox_test$p.value, eff_size$estimate, wilcox_test$statistic
)
# Return dataframe
print(toReturn)
}
# New connections of interest after fixed modality (SVD):
# Phase 1 and 2
# signedRank2(1, 2, "task_execution", "peer")
# signedRank2(1, 2, "laptop", "cognitive")
# signedRank2(1, 2, "peer", "other")
# signedRank2(1, 2, "cognitive", "metacognitive")
# signedRank2(1, 2, "other", "metacognitive")
# signedRank2(1, 2, "peer", "metacognitive")
# signedRank2(1, 2, "task_execution", "laptop")
# signedRank2(1, 2, "peer", "cognitive")
# signedRank2(1, 2, "task_execution", "other")
# signedRank2(1, 2, "laptop", "metacognitive")
#
# # Phase 2 and 3
# signedRank2(2, 3, "metacognitive", "cognitive")
# signedRank2(2, 3, "peer", "cognitive")
# signedRank2(2, 3, "task_execution", "peer")
# signedRank2(2, 3, "peer", "other")
# signedRank2(2, 3, "peer", "metacognitive")
# signedRank2(2, 3, "metacognitive", "laptop")
# signedRank2(2, 3, "task_execution", "other")
# signedRank2(2, 3, "cognitive", "laptop")
#
# # Phase 3 and 4
# signedRank2(3, 4, "task_execution", "peer")
# signedRank2(3, 4, "metacognitive", "cognitive")
# signedRank2(3, 4, "task_execution", "laptop")
# signedRank2(3, 4, "task_execution", "socio-emo")
# signedRank2(3, 4, "task_execution", "other")
# signedRank2(3, 4, "other", "cognitive")
# signedRank2(3, 4, "peer", "metacognitive")
# signedRank2(3, 4, "metacognitive", "laptop")
# signedRank2(3, 4, "other", "metacognitive")
# signedRank2(3, 4, "socio-emo", "metacognitive")
# signedRank2(3, 4, "other", "laptop")
# signedRank2(3, 4, "socio-emo", "peer")
# signedRank2(3, 4, "metacognitive", "cognitive")
# Signed rank function for phases 1, 2, 3, 4, and 5 using 15 students.
signedRank3 <- function(phase, phase_next, code1, code2) {
to_search <- str_c(code1, " & ", code2) # Concatenate code1 and code2 to get a string to search with
phaseid <- ona_multimodal_tif_set$line.weights$phaseid # Get the phase matrix from lineweights
units_rows <- ona_multimodal_tif_set$line.weights$ENA_UNIT # Get units from lineweights
units_rows <- as.data.frame(units_rows) %>%
mutate(units = str_sub(units_rows, start = 1, end = -2))
units_rows <- pull(units_rows, units)
line_weights_rows = ona_multimodal_tif_set$line.weights[[to_search]] # Filter lineweights according to code pairs
# Build temporary dataframe containing all phases, units, and their respective lineweights
temp_df <- as.data.frame(phaseid) %>%
mutate(units = units_rows) %>%
mutate(line_weights = line_weights_rows)
# Get units from phase 4
phase_5_units_df <- temp_df %>%
filter(phaseid == 5)
phase_5_units <- pull(phase_5_units_df, units)
# Dataframe for the first phase
phase_df <- temp_df %>%
filter(phaseid == phase) %>%
filter(units %in% phase_5_units)
# Dataframe for the second phase
phase_next_df <- temp_df %>%
filter(phaseid == phase_next) %>%
filter(units %in% phase_5_units)
# Bind together these two dataframes
silly_df <- rbind(phase_df, phase_next_df)
# Perform Wilcoxon signed-rank test
wilcox_test = wilcox.test(line_weights ~ phaseid, data = silly_df, paired = TRUE)
# Pull out lineweights from pre-binded dataframes for Cohen's d calculation
key_lw1 <- pull(phase_df, line_weights)
key_lw2 <- pull(phase_next_df, line_weights)
# Calculate the effect size using Cohen's d
eff_size <- cohen.d(key_lw1, key_lw2, var.equal = FALSE)
# Make comprehensive dataframe detailing the results
toReturn <- tribble(
~"initial_phase", ~"next_phase", ~"codes", ~"p-value", ~"effect_size", ~"U-statistic",
phase, phase_next, to_search, wilcox_test$p.value, eff_size$estimate, wilcox_test$statistic
)
# Return dataframe
print(toReturn)
}
# # # Connections to test for phases 1, 2, 3, 4, and 5
# # # Phase 1 and 2, low_metacognitive to cognitive
# signedRank3(1, 2, "metacognitive", "cognitive")
# # #
# # # # Phase 1 and 2, task_execution to low_metacognitive
# signedRank3(1, 2, "task_execution", "metacognitive")
# # #
# # # # Phase 1 and 2, other to low_metacognitive
# signedRank3(1, 2, "other", "metacognitive")
# # #
# # # # Phase 1 and 2, low_metacognitive to laptop
# signedRank3(1, 2, "metacognitive", "laptop")
# # # # Phase 1 and 2, peer to cognitive
# signedRank3(1, 2, "peer", "cognitive")
# # # Phase 1 and 2, socio-emo to cognitive
# signedRank3(1, 2, "socio-emo", "cognitive")
# # # Phase 1 and 2, peer to socio-emo
# signedRank3(1, 2, "peer", "socio-emo")
# # # # Phase 1 and 2, laptop to socio-emo
# signedRank3(1, 2, "laptop", "socio-emo")
# # # Phase 2 and 3, peer to low_metacognitive
# signedRank3(2, 3, "peer", "metacognitive")
# # #
# # # # Phase 2 and 3, low_metacognitive to cognitive
# signedRank3(2, 3, "metacognitive", "cognitive")
# # #
# # # # Phase 2 and 3, task_execution to low_metacognitive
# signedRank3(2, 3, "task_execution", "metacognitive")
# # # # Phase 2 and 3, peer to cognitive
# signedRank3(2, 3, "peer", "cognitive")
# # # # Phase 2 and 3, socio-emo to cognitive
# signedRank3(2, 3, "socio-emo", "cognitive")
# # # # Phase 2 and 3, peer to socio-emo
# signedRank3(2, 3, "peer", "socio-emo")
# # # # Phase 2 and 3, laptop to socio-emo
# signedRank3(2, 3, "laptop", "socio-emo")
# # # # Phase 2 and 3, task_execution to peer
# signedRank3(2, 3, "task_execution", "peer")
# #
# # # # Phase 2 and 3, laptop to cognitive
# signedRank3(2, 3, "laptop", "cognitive")
# # # Phase 3 and 4, low_metacognitive to cognitive
# signedRank3(3, 4, "metacognitive", "cognitive")
# # # # Phase 3 and 4, task_execution to socio-emo
# signedRank3(3, 4, "task_execution", "socio-emo")
# # #
# # # # Phase 3 and 4, peer to low_metacognitive
# signedRank3(3, 4, "peer", "metacognitive")
# # #
# # # # Phase 3 and 4, low_metacognitive to laptop
# signedRank3(3, 4, "metacognitive", "laptop")
# # #
# # # # Phase 3 and 4, socio-emo to laptop
# signedRank3(3, 4, "socio-emo", "laptop")
# # #
# # # # Phase 3 and 4, socio-emo to peer
# signedRank3(3, 4, "socio-emo", "peer")
# # # Phase 3 and 4, task_execution to cognitive
# signedRank3(3, 4, "task_execution", "cognitive")
# # # Phase 3 and 4, task_execution to peer
# signedRank3(3, 4, "task_execution", "peer")
# # # Phase 3 and 4, laptop to cognitive
# signedRank3(3, 4, "laptop", "cognitive")
# # # # Phase 3 and 4, peer to cognitive
# signedRank3(3, 4, "peer", "cognitive")
# # # # Phase 3 and 4, socio-emo to cognitive
# signedRank3(3, 4, "socio-emo", "cognitive")
# # # Phase 3 and 4, peer to socio-emo
# signedRank3(3, 4, "peer", "socio-emo")
# # # # Phase 3 and 4, laptop to socio-emo
# signedRank3(3, 4, "laptop", "socio-emo")
# # Phase 4 and 5, task_execution to low_metacognitive
# signedRank3(4, 5, "task_execution", "metacognitive")
# # # Phase 4 and 5, low_metacognitive to laptop
# signedRank3(4, 5, "metacognitive", "laptop")
# # # Phase 4 and 5, low_metacognitive to peer
# signedRank3(4, 5, "metacognitive", "peer")
# # # Phase 4 and 5, peer to cognitive
# signedRank3(4, 5, "peer", "cognitive")
# # # Phase 4 and 5, socio-emo to cognitive
# signedRank3(4, 5, "socio-emo", "cognitive")
# # # Phase 4 and 5, peer to socio-emo
# signedRank3(4, 5, "peer", "socio-emo")
# # # Phase 4 and 5, laptop to socio-emo
# signedRank3(4, 5, "laptop", "socio-emo")
# Before proceeding to the difference plots, make sure that we use phases 1, 2, 3, and 4 with 24 units
phaseid <- ona_multimodal_tif_set$line.weights$phaseid # Get the phase matrix from lineweights
units_rows <- ona_multimodal_tif_set$line.weights$ENA_UNIT # Get units from lineweights
units_rows <- as.data.frame(units_rows) %>%
mutate(units = str_sub(units_rows, start = 1, end = -2))
units_rows <- pull(units_rows, units)
line_weights_rows <- ona_multimodal_tif_set$line.weights # get lineweights
points_rows <- ona_multimodal_tif_set$points # get points
# Build temporary dataframe containing all phases, units, and their respective lineweights
temp_df <- as.data.frame(phaseid) %>%
mutate(units = units_rows) %>%
mutate(line_weights = line_weights_rows) %>%
mutate(points = points_rows)
# Get units from phase 4
phase_4_units_df <- temp_df %>%
filter(phaseid == 4)
phase_4_units <- pull(phase_4_units_df, units)
# Verify that phases 1, 2, and 3 include the same inuts
phase_1 <- temp_df %>%
filter(phaseid == 1) %>%
filter(units %in% phase_4_units)
phase_2 <- temp_df %>%
filter(phaseid == 2) %>%
filter(units %in% phase_4_units)
phase_3 <- temp_df %>%
filter(phaseid == 3) %>%
filter(units %in% phase_4_units)
phase_4 <- temp_df %>%
filter(phaseid == 4)
ona_df <- rbind(phase_1, phase_2, phase_3, phase_4) %>%
select(-units) %>%
select(-phaseid)
# Try calculating pairwise wilcoxon signed rank tests w/ BH corrections with this
pairwise.wilcox.test(ona_df$points$SVD2, ona_df$points$phaseid, p.adjust.method = "BH", paired = TRUE)
p1 <- phase_1$points$SVD2
p2 <- phase_2$points$SVD2
p3 <- phase_3$points$SVD2
p4 <- phase_4$points$SVD2
rank_biserial(p1, p2)
rank_biserial(p2, p3)
rank_biserial(p3, p4)
library(rstatix)
res.fried <- ona_df %>% friedman_test(points$SVD2 ~  points$phaseid |id)
library(rstatix)
res.fried <- ona_df %>% friedman_test(points$SVD2 ~  points$phaseid)
library(rstatix)
res.fried <- ona_df %>% friedman_test(points$SVD2 ~  points$phaseid | points$participant)
View(ona_df)
library(rstatix)
res.fried <- ona_df %>% friedman_test(points$SVD2 ~  points$phaseid | points$ENA_UNIT)
library(rstatix)
res.fried <- ona_df %>% friedman_test(`points$SVD2` ~ `points$phaseid` | `points$ENA_UNIT`)
library(rstatix)
res.fried <- friedman_test(ona_df$points$SVD2 ~ ona_df$points$phaseid |ona_df$points$ENA_UNIT)
library(rstatix)
res.fried <- friedman_test(ona_df$points$SVD2 ~ ona_df$points$phaseid | ona_df$points$ENA_UNIT)
library(rstatix)
res.fried <- friedman_test(ona_df$points$SVD2 ~ ona_df$points$phaseid | ona_df$points$ENA_UNIT)
library(rstatix)
res.fried <- friedman_test(ona_df$points$SVD2 ~ ona_df$points$phaseid | ona_df$points$participant)
library(rstatix)
res.fried <- friedman_test(ona_df$points$SVD2 ~ ona_df$points$phaseid | ona_df$points$participant)
# Before proceeding to the difference plots, make sure that we use phases 1, 2, 3, and 4 with 24 units
phaseid <- ona_multimodal_tif_set$line.weights$phaseid # Get the phase matrix from lineweights
units_rows <- ona_multimodal_tif_set$line.weights$ENA_UNIT # Get units from lineweights
units_rows <- as.data.frame(units_rows) %>%
mutate(units = str_sub(units_rows, start = 1, end = -2))
units_rows <- pull(units_rows, units)
line_weights_rows <- ona_multimodal_tif_set$line.weights # get lineweights
points_rows <- ona_multimodal_tif_set$points # get points
# Build temporary dataframe containing all phases, units, and their respective lineweights
temp_df <- as.data.frame(phaseid) %>%
mutate(units = units_rows) %>%
mutate(line_weights = line_weights_rows) %>%
mutate(points = points_rows)
# Get units from phase 4
phase_4_units_df <- temp_df %>%
filter(phaseid == 4)
phase_4_units <- pull(phase_4_units_df, units)
# Verify that phases 1, 2, and 3 include the same inuts
phase_1 <- temp_df %>%
filter(phaseid == 1) %>%
filter(units %in% phase_4_units)
phase_2 <- temp_df %>%
filter(phaseid == 2) %>%
filter(units %in% phase_4_units)
phase_3 <- temp_df %>%
filter(phaseid == 3) %>%
filter(units %in% phase_4_units)
phase_4 <- temp_df %>%
filter(phaseid == 4)
ona_df <- rbind(phase_1, phase_2, phase_3, phase_4)
# Try calculating pairwise wilcoxon signed rank tests w/ BH corrections with this
pairwise.wilcox.test(ona_df$points$SVD2, ona_df$points$phaseid, p.adjust.method = "BH", paired = TRUE)
p1 <- phase_1$points$SVD2
p2 <- phase_2$points$SVD2
p3 <- phase_3$points$SVD2
p4 <- phase_4$points$SVD2
rank_biserial(p1, p2)
rank_biserial(p2, p3)
rank_biserial(p3, p4)
library(rstatix)
res.fried <- friedman_test(ona_df$points$SVD2 ~ ona_df$points$phaseid | units)
library(rstatix)
res.fried <- ona_df %>% friedman_test(points$SVD2 ~ points$phaseid | units)
library(rstatix)
# Make df
friedman_df <- as.data.frame(ona_df$units) %>%
mutate(points = ona_df$points$SVD2) %>%
mutate(phaseid = ona_df$points$phaseid) %>%
rename(units = `ona_df$units`)
res.fried <- friedman_df %>% (points ~ phaseid | units)
library(rstatix)
# Make df
friedman_df <- as.data.frame(ona_df$units) %>%
mutate(points = ona_df$points$SVD2) %>%
mutate(phaseid = ona_df$points$phaseid) %>%
rename(units = `ona_df$units`)
res.fried <- friedman_df %>% (points ~ phaseid | units)
res.fried
library(rstatix)
# Make df
friedman_df <- as.data.frame(ona_df$units) %>%
mutate(points = ona_df$points$SVD2) %>%
mutate(phaseid = ona_df$points$phaseid) %>%
rename(units = `ona_df$units`)
res.fried <- friedman_df %>% friedman_test(points ~ phaseid | units)
View(friedman_df)
library(rstatix)
# Make df
friedman_df <- as.data.frame(ona_df$units) %>%
mutate(points_SVD1 = ona_df$points$SVD1) %>%
mutate(points_SVD2 = ona_df$points$SVD2)
mutate(phaseid = ona_df$points$phaseid) %>%
rename(units = `ona_df$units`)
library(rstatix)
# Make df
friedman_df <- as.data.frame(ona_df$units) %>%
mutate(points_SVD1 = ona_df$points$SVD1) %>%
mutate(points_SVD2 = ona_df$points$SVD2)
mutate(phaseid = ona_df$points$phaseid) %>%
rename(units = `ona_df$units`)
library(rstatix)
# Make df
friedman_df <- as.data.frame(ona_df$units) %>%
mutate(points_SVD1 = ona_df$points$SVD1) %>%
mutate(points_SVD2 = ona_df$points$SVD2) %>%
mutate(phaseid = ona_df$points$phaseid) %>%
rename(units = `ona_df$units`)
res.fried <- friedman_df %>% friedman_test(points_SVD1 ~ phaseid | units)
library(rstatix)
# Make df
friedman_df <- as.data.frame(ona_df$units) %>%
mutate(points_SVD1 = ona_df$points$SVD1) %>%
mutate(points_SVD2 = ona_df$points$SVD2) %>%
mutate(phaseid = ona_df$points$phaseid) %>%
rename(units = `ona_df$units`)
res.fried <- friedman_test(points_SVD1 ~ units | phaseid, data = friedman_df)
View(ona_df)
